---
    - name: Set directory variables
      set_fact:
        backup_directory: "{{ playbook_dir }}/checks/backup_directory"
        config: "{{ playbook_dir }}/roles/ipv6/config"

    - name: Create directories
      file: 
        path: "{{ backup_directory }}"
        state: directory

    - name: Copying running-configuration
      cli_command:
       command: show running-config
      register: pre_running_conf

    - copy:
       content: "{{ pre_running_conf.stdout[0] }}"
       dest: "{{ backup_directory }}/{{ inventory_hostname }}_pre_running_config.txt"

    - name: Pre-check VRF
      cli_command:
        command: "show vrf {{ item }}"
      with_items:
        - "brief"
      register: vrf_post.results

    - assert:
        that:
          - "'ipv6' not in item.stdout"
        success_msg: "No VRF Configuration exists. Continue"
        fail_msg: "Configuration already in place"
      with_items:
        - "{{ vrf_pre.results }}"
      ignore_errors: True

    - name: Deploy VRF 
      cli_config:
        config: "{{ lookup('file', '{{ config }}/{{ inventory_hostname }}/1_vrf.txt') }}"
        commit: yes

    - name: Post-check VRF
      cli_command:
        command: "show vrf {{ item }}"
      with_items:
        - "brief"
      register: vrf_post

    - assert:
        that:
          - "'ipv6' in item.stdout"
        success_msg: "VRF Configuration exists. Continue"
        fail_msg: "Configuration not deployed"
      with_items:
        - "{{ vrf_post.results }}"
      ignore_errors: True

    - set_fact:
        po_list: |
          {%- set list = [] -%}
          {%- for interface in sites[inventory_hostname[0:3]][inventory_hostname[3:8]]['interfaces'] -%}
          {%- if interface.startswith('po') -%}
          {{ list.append(interface.strip('\n'))}}
          {%- endif -%}
          {%- endfor -%}
          {{ list }}

    - set_fact:
        lo_list: |
          {%- set list = [] -%}
          {%- for interface in sites[inventory_hostname[0:3]][inventory_hostname[3:8]]['interfaces'] -%}
          {%- if interface.startswith('lo') -%}
          {{ list.append(interface.strip('\n'))}}
          {%- endif -%}
          {%- endfor -%}
          {{ list }}
        
    - name: Pre-check looback
      cli_command:
        command: "show run interface {{ item }}"
      with_items:
        - "{{lo_list}}"
      register: lo_pre

    - assert:
        that:
          - "'ipv6 address' not in item.stdout"
          - "'ospfv3 1100 ipv6 area 0.0.0.0' not in item.stdout"
        success_msg: "No IPv6 configuration deployed on Loopback. Continue"
        fail_msg: "IPv6 configuration already deployed"
      with_items: 
        - "{{ lo_pre.results }}"
      ignore_errors: True

    - name: Pre-check port-channel 
      cli_command:
        command: "show run interface {{ item }}"
      with_items:
        - "{{po_list}}"
      register: po_pre
    - assert:
        that:
          - "'ipv6 address' not in item.stdout"
          - "'ipv6 nd ra suppress' not in item.stdout"
          - "'ospfv3 1100 ipv6 area 0.0.0.0' not in item.stdout"
          - "'ospfv3 cost 200' not in item.stdout"
        success_msg: "No IPv6 configuration deployed on Port-Channels. Continue"
        fail_msg: "IPv6 configuration already deployed on Port-Channels"
      with_items: 
        - "{{ po_pre.results }}"
      ignore_errors: True

    - name: Deploy interface 
      cli_config:
        config: "{{ lookup('file', '{{ config }}/{{ inventory_hostname }}/2_interface.txt') }}"
        commit: yes

    - name: Post-check looback 
      cli_command:
        command: "show run interface {{ item }}"
      with_items:
        - "{{lo_list}}"
      register: lo_post
    - assert:
        that:
          - "'ipv6 address' in item.stdout"
          - "'ospfv3 1100 ipv6 area 0.0.0.0' in item.stdout"
        success_msg: "IPv6 configuration deployed on Loopback. Continue"
        fail_msg: "No IPv6 configuration deployed"
      with_items: 
        - "{{ lo_post.results }}"
      ignore_errors: True

    - name: Post-check port-channel 
      cli_command:
        command: "show run interface {{ item }}"
      with_items:
        - "{{po_list}}"
      register: po_post
    - assert:
        that:
          - "'ipv6 address' in item.stdout"
          - "'ipv6 nd ra suppress' in item.stdout"
          - "'ospfv3 1100 ipv6 area 0.0.0.0' in item.stdout"
          - "'ospfv3 cost 200' in item.stdout"
        success_msg: "IPv6 configuration deployed on Port-Channels. Continue"
        fail_msg: "No IPv6 configuration deployed on Port-Channels"
      with_items: 
        - "{{ po_post.results }}"
      ignore_errors: True

    - name: Pre-check pool
      cli_command:
        command: "show ipv6 local pool"
      register: pool_pre

    - assert:
        that:
          - "'' in item.stdout"
        success_msg: "IPv6 pool not deployed. Continue"
        fail_msg: "IPv6 pool present."
      with_items: 
        - "{{ pool_pre.results }}"      
      ignore_errors: True

    - name: Pre-check prefix-list
      cli_command:
        command: "show ipv6 prefix-list"
      register: prefix_pre
    - assert:
        that:
          - "'' in prefix_pre.stdout"
        success_msg: "No IPv6 Prefix-List. Continue"
        fail_msg: "IPv6 prefix list present."
      ignore_errors: True

    - name: Deploy prefix-list
      cli_config:
        config: "{{ lookup('file', '{{ config }}/{{ inventory_hostname }}/3_prefix.txt') }}"
        commit: yes

    - name: Post-check pool 
      cli_command:
        command: "show ipv6 local pool"
      register: pool_post
    - assert:
        that:
          - "'bb1-ipv6-pool' in pool_post.stdout"
        success_msg: "IPv6 Pool deployed. Continue"
        fail_msg: "IPv6 Pool not present."
      ignore_errors: True

    - name: Post-check prefix-list 
      cli_command:
        command: "show ipv6 prefix-list"
      register: prefix_post
    - assert:
        that:
          - "'ipv6 prefix-list V6_BB1_LAR_OUTBOUND: 3 entries' in prefix_post.stdout"
        success_msg: "IPv6 Prefix-List deployed. Continue"
        fail_msg: "IPv6 prefix list present."
      ignore_errors: True

    - name: Pre-check BGP 
      cli_command:
        command: "show running-config | i address family ipv6 vrf BBONEDEFAULT"
      register: bgp_pre
    - assert:
        that:
          - "'address-family ipv6 vrf BBONEDEFAULT' not in bgp_pre.stdout"
        success_msg: "IPv6 BGP not deployed. Continue"
        fail_msg: "IPv6 BGP already deployed."
      ignore_errors: True

    - name: Deploy BGP 
      cli_config:
        config: "{{ lookup('file', '{{ config }}/{{ inventory_hostname }}/4_bgp.txt') }}"
        commit: yes

    - name: Post-check BGP n
      cli_command:
        command: "show running-config | i address family ipv6 vrf BBONEDEFAULT"
      register: bgp_post
    - assert:
        that:
          - "'address-family ipv6 vrf BBONEDEFAULT' in bgp_post.stdout"
        success_msg: "IPv6 BGP deployed. Continue"
        fail_msg: "IPv6 BGP not deployed."
      ignore_errors: True    

    - name: Pre-check OSPF 
      cli_command:
        command: "show ospfv3 ipv6 vrf BBONEDEFAULT"
      register: ospf_pre
    - assert:
        that:
          - "'' in ospf_pre.stdout"
        success_msg: "OSPFv3 not deployed. Continue"
        fail_msg: "OSPFv3 already deployed."
      ignore_errors: True

    - name: Deploy OSPF 
      cli_config:
        config: "{{ lookup('file', '{{ config }}/{{ inventory_hostname }}/5_ospf.txt') }}"
        commit: yes

    - name: Post-check OSPF 
      cli_command:
        command: "show ospfv3 ipv6 vrf BBONEDEFAULT"
      register: ospf_post
    - assert:
        that:
          - "'OSPFv3 1100 address-family ipv6 vrf BBONEDEFAULT' in ospf_post.stdout"
        success_msg: "OSPFv3 deployed. Continue"
        fail_msg: "OSPFv3 not deployed."
      ignore_errors: True

    - name: Copying running-configuration
      cli_command:
       command: show running-config
      register: post_running_conf
    - copy:
       content: "{{ post_running_conf.stdout[0] }}"
       dest: "{{ backup_directory }}/{{ time }}_{{ inventory_hostname }}_Post_Running_Config.txt"

